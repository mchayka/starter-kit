/** @define arrange */

/*! suit-arrange v0.3.0 | MIT License | github.com/suitcss */

/* ==========================================================================
   arrange cells
   ========================================================================== */

$arrange-gutter: 10px !default;

/**
 * This component lets you lay out a row of cells in various ways. You can
 * specify whether a cell should be wide enough to fit its content, or take up
 * the remaining space in the row. It's also possible to give all cells an
 * equal width, and to control their vertical alignment.
 *
 * `arrange` must only contain 'arrange-sizeFit' and 'arrange-sizeFill' child
 * nodes.
 *
 * It's recommended that you only use one 'arrange-sizeFill' per component
 * instance (unless using the `arrange--equal` modifier; see below). The
 * first 'arrange-sizeFill' in the component's source order will not share the
 * extra space with any subsequent nodes of that class.
 *
 * Example HTML:
 *
 * <div class="arrange [arrange--middle|arrange--bottom|arrange--equal] [arrange--withGutter]">
 *   <div class="arrange-sizeFit">
 *     [content]
 *   </div>
 *   <div class="arrange-sizeFill">
 *     [content]
 *   </div>
 *   <div class="arrange-sizeFit">
 *     [content]
 *   </div>
 * </div>
 */

/**
 * 1. Protect against the component expanding beyond the confines of its
 *    container if properties affecting the box-model are applied to the
 *    component. Mainly necessary because of (5).
 * 2. Rely on table layout.
 * 3. Zero out the default spacing that might be on an element (e.g., `ul`).
 * 4. Make sure the component fills at least the full width of its parent.
 * 5. Reset the table-layout algorithm in case a component is nested.
 */

.arrange {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box; /* 1 */
    display: table; /* 2 */
    margin: 0; /* 3 */
    min-width: 100%; /* 4 */
    padding: 0; /* 3 */
    table-layout: auto; /* 5 */
}

/**
 * There are two possible types of child. `sizeFill` will expand to fill all
 * of the remaining space not filled by `sizeFit` elements.
 *
 * 1. Zero out any default spacing that might be on an element (e.g., `li`);
 *    Margin has no effect when coupled with `display: table-cell`.
 * 2. All cells are top-aligned by default
 */

.arrange-sizeFill,
.arrange-sizeFit {
    display: table-cell;
    padding: 0; /* 1 */
    vertical-align: top; /* 2 */
}

/**
 * Make sure the main content block expands to fill the remaining space.
 */

.arrange-sizeFill {
    width: 100%;
}

/**
 * Where possible, protect against large images breaking the layout. Prevent them from
 * exceeding the width of the main content block by making them fluid.
 *
 * Only work for all browsers with the `arrange--equally` variant. For Firefox
 * and IE to constrain image dimensions for other layouts, large images will
 * need their width set to `100%`.
 */

.arrange-sizeFill img {
    height: auto;
    max-width: 100%;
}

/**
 * Defend against a side-effect of this layout pattern: images in
 * 'arrange-sizeFit' cannot be fluid, otherwise they lose their ability to
 * provide size to a cell.
 */

.arrange-sizeFit img {
    max-width: none !important;
    width: auto !important;
}

/* Vertical alignment modifiers
   ========================================================================== */

.arrange--middle .arrange-sizeFill,
.arrange--middle .arrange-sizeFit {
    vertical-align: middle;
}

.arrange--bottom .arrange-sizeFill,
.arrange--bottom .arrange-sizeFit {
    vertical-align: bottom;
}

/* Equal-width modifier
   ========================================================================== */

/**
 * This layout algorithm will create equal-width table cells, irrespective of
 * the width of their content.
 */

.arrange--equal {
    table-layout: fixed;
}

/**
 * Give the cells an equal width. This value ensures that arrange is still 100%
 * wide when gutters are used in conjunctions with equal-width cells.
 *
 * It's recommended that only 'arrange-sizeFill' be used for equal width cells.
 * Their inner images will automatically be responsive.
 */

.arrange--equal > .arrange-sizeFill,
.arrange--equal > .arrange-sizeFit {
    width: 1%;
}

/* Gutter modifier
   ========================================================================== */

/**
 * Add a gutter between cells
 */

.arrange--withGutter {
    margin-left: -1 * $arrange-gutter;
}

.arrange--withGutter > .arrange-sizeFit,
.arrange--withGutter > .arrange-sizeFill {
    padding-left: $arrange-gutter;
}